
./bin/mi_bios.elf:     formato del fichero elf32-i386
./bin/mi_bios.elf
arquitectura: i386, opciones 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
dirección de inicio 0xfffffff0

Encabezado del Programa:
    LOAD off    0x00001000 vaddr 0xffff0000 paddr 0xffff0000 align 2**12
         filesz 0x00000086 memsz 0x00000086 flags r--
    LOAD off    0x00002000 vaddr 0x00300000 paddr 0xffff2000 align 2**12
         filesz 0x00000003 memsz 0x00000003 flags r--
    LOAD off    0x00002800 vaddr 0xfffff800 paddr 0xfffff800 align 2**12
         filesz 0x00000800 memsz 0x00000800 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .codigo_kernel32 00000003  00300000  ffff2000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .codigo_init16 00000086  ffff0000  ffff0000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .codigo_init32 00000075  fffff800  fffff800  00002800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .functions_rom 00000040  fffffc00  fffffc00  00002c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .data         00000026  fffffd00  fffffd00  00002d00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .codigo_reset 00000008  fffffff0  fffffff0  00002ff0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .fill_rom     00000008  fffffff8  fffffff8  00002ff8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .comment      00000026  00000000  00000000  00003000  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00300000 l    d  .codigo_kernel32	00000000 .codigo_kernel32
ffff0000 l    d  .codigo_init16	00000000 .codigo_init16
fffff800 l    d  .codigo_init32	00000000 .codigo_init32
fffffc00 l    d  .functions_rom	00000000 .functions_rom
fffffd00 l    d  .data	00000000 .data
fffffff0 l    d  .codigo_reset	00000000 .codigo_reset
fffffff8 l    d  .fill_rom	00000000 .fill_rom
00000000 l    d  .comment	00000000 .comment
00000000 l    df *ABS*	00000000 src/main.asm
00300000 l       .codigo_kernel32	00000000 kernel32_init.guard
00300003 l       .codigo_kernel32	00000000 kernel32_end
00000000 l    df *ABS*	00000000 src/init16.asm
ffff000a l       .codigo_init16	00000000 A20_Enable_No_Stack_return
ffff0046 l       .codigo_init16	00000000 fault_end
ffff0047 l       .codigo_init16	00000000 A20_Enable_No_Stack
ffff004e l       .codigo_init16	00000000 A20_Enable_No_Stack.8042_kbrd_dis
ffff0057 l       .codigo_init16	00000000 A20_Enable_No_Stack.8042_read_out
ffff005b l       .codigo_init16	00000000 A20_Enable_No_Stack.empty_8042_out
ffff0066 l       .codigo_init16	00000000 A20_Enable_No_Stack.8042_write_out
ffff006f l       .codigo_init16	00000000 A20_Enable_No_Stack.8042_set_a20
ffff007b l       .codigo_init16	00000000 A20_Enable_No_Stack.8042_kbrd_en
ffff0082 l       .codigo_init16	00000000 A20_Enable_No_Stack.empty_8042_in
ffff0084 l       .codigo_init16	00000000 A20_Enable_No_Stack.a20_enable_no_stack_exit
ffff0086 l       .codigo_init16	00000000 endcode
00000000 l    df *ABS*	00000000 src/init32.asm
fffff81d l       .codigo_init32	00000000 start32_launcher.stack_init
fffff872 l       .codigo_init32	00000000 start32_launcher.guard
00000000 l    df *ABS*	00000000 functions_rom.c
00000000 l    df *ABS*	00000000 src/sys_tables.asm
fffffd00 l       .data	00000000 GDT
00000000 l       *ABS*	00000000 NULL_SEL
00000020 l       *ABS*	00000000 GDT_LENGTH
00000000 l    df *ABS*	00000000 src/reset.asm
fffffff5 l       .codigo_reset	00000000 halted
fffffff8 l       .codigo_reset	00000000 end
fffffff0 g       *ABS*	00000000 __RESET_LMA
ffff1000 g       *ABS*	00000000 __FUNCTIONS_LMA
00000000 g       *ABS*	00000000 __functions_size
fffffc00 g       *ABS*	00000000 __FUNCTIONS_ROM_VMA
ffff0000 g       *ABS*	00000000 __INIT_16_LMA
fffffc00 g       *ABS*	00000000 __FUNCTIONS_ROM_LMA
00000018 g       *ABS*	00000000 DS_SEL
fffffff0 g       .codigo_reset	00000000 reset
2fff8000 g       *ABS*	00000000 __STACK_START_32
00000000 g       *ABS*	00000000 __FUNCTIONS_VMA
ffff0000 g       *ABS*	00000000 __INIT_16_VMA
fffffd20 g       .data	00000000 _gdtr
fffffd00 g       *ABS*	00000000 __SYS_TABLES_VMA
00009000 g       *ABS*	00000000 __STACK_START_16
00300000 g       .codigo_kernel32	00000000 kernel32_init
2fff8fff g       *ABS*	00000000 __STACK_END_32
00300000 g       *ABS*	00000000 __KERNEL_32_VMA
00000010 g       *ABS*	00000000 CS_SEL_32
000003ff g       *ABS*	00000000 __STACK_SIZE_32
00009fff g       *ABS*	00000000 __STACK_END_16
ffff2000 g       *ABS*	00000000 __KERNEL_32_LMA
00000008 g       *ABS*	00000000 CS_SEL_16
fffffff0 g       *ABS*	00000000 __RESET_VMA
00000003 g       *ABS*	00000000 kernel32_code_size
fffff800 g       *ABS*	00000000 __INIT_32_VMA
00060000 g       *ABS*	00000000 __EH_FRAME
00050000 g       *ABS*	00000000 __DATA_NO_INIT
ffff0000 g       .codigo_init16	00000000 start16
fffff800 g       *ABS*	00000000 __INIT_32_LMA
fffffd00 g       *ABS*	00000000 __SYS_TABLES_LMA
00000003 g       *ABS*	00000000 __codigo_kernel32_size
fffffc00 g     F .functions_rom	00000040 __fast_memcpy_rom
fffff800 g       .codigo_init32	00000000 start32_launcher


Contenido de la sección .codigo_kernel32:
 300000 f4ebfd                               ...             
Contenido de la sección .codigo_init16:
 ffff0000 66a90000 0000753e eb3d87db 6631c00f  f.....u>.=..f1..
 ffff0010 22d88cc8 8ed8b800 908ed0bc ff9f0f20  ".............. 
 ffff0020 c0660d00 0000600f 22c00f09 87db0f01  .f....`.".......
 ffff0030 1620fd0f 01e083c8 010f01f0 87db66ea  . ............f.
 ffff0040 00f8ffff 1000f431 c0bf4e00 eb34b0ad  .......1..N..4..
 ffff0050 e664bf57 00eb2bb0 d0e66431 dbe46089  .d.W..+...d1..`.
 ffff0060 c3bf6600 eb1cb0d1 e664bf6f 00eb1389  ..f......d.o....
 ffff0070 d883c802 e660bf7b 00eb07b0 aee664bf  .....`.{......d.
 ffff0080 8400ffe7 eb84                        ......          
Contenido de la sección .codigo_init32:
 fffff800 6687db66 b818008e d88ec08e e88ee08e  f..f............
 fffff810 d0bcff8f ff2f31c0 b9ff0300 0050e2fd  ...../1......P..
 fffff820 bcff8fff 2f6687db 5589e568 00000000  ..../f..U..h....
 fffff830 68000000 00680010 ffffe8c1 03000066  h....h.........f
 fffff840 87dbc983 f801752a 6687db55 89e56803  ......u*f..U..h.
 fffff850 00000068 00003000 680020ff ffe89e03  ...h..0.h. .....
 fffff860 0000c983 f801750a 6687dbea 00003000  ......u.f.....0.
 fffff870 1000f4eb fd                          .....           
Contenido de la sección .functions_rom:
 fffffc00 f30f1efb 5589e583 ec10c645 ff01837d  ....U......E...}
 fffffc10 10007426 eb1a836d 10018b55 088d4204  ..t&...m...U..B.
 fffffc20 8945088b 450c8d48 04894d0c 8b128910  .E..E..H..M.....
 fffffc30 837d1000 75e0c645 ff000fb6 45ffc9c3  .}..u..E....E...
Contenido de la sección .data:
 fffffd00 00000000 00000000 ffff0000 ff9940ff  ..............@.
 fffffd10 ffff0000 0099cf00 ffff0000 0092cf00  ................
 fffffd20 1f0000fd 0f00                        ......          
Contenido de la sección .codigo_reset:
 fffffff0 fafce90b 00f4ebfd                    ........        
Contenido de la sección .fill_rom:
 fffffff8 90909090 90909090                    ........        
Contenido de la sección .comment:
 0000 4743433a 20285562 756e7475 2031302e  GCC: (Ubuntu 10.
 0010 322e302d 31337562 756e7475 31292031  2.0-13ubuntu1) 1
 0020 302e322e 3000                        0.2.0.          

Desensamblado de la sección .functions_rom:
fffffc00 <__fast_memcpy_rom> endbr32 
fffffc04 <__fast_memcpy_rom+0x4> push   %ebp
fffffc05 <__fast_memcpy_rom+0x5> mov    %esp,%ebp
fffffc07 <__fast_memcpy_rom+0x7> sub    $0x10,%esp
fffffc0a <__fast_memcpy_rom+0xa> movb   $0x1,-0x1(%ebp)
fffffc0e <__fast_memcpy_rom+0xe> cmpl   $0x0,0x10(%ebp)
fffffc12 <__fast_memcpy_rom+0x12> je     fffffc3a <__fast_memcpy_rom+0x3a>
fffffc14 <__fast_memcpy_rom+0x14> jmp    fffffc30 <__fast_memcpy_rom+0x30>
fffffc16 <__fast_memcpy_rom+0x16> subl   $0x1,0x10(%ebp)
fffffc1a <__fast_memcpy_rom+0x1a> mov    0x8(%ebp),%edx
fffffc1d <__fast_memcpy_rom+0x1d> lea    0x4(%edx),%eax
fffffc20 <__fast_memcpy_rom+0x20> mov    %eax,0x8(%ebp)
fffffc23 <__fast_memcpy_rom+0x23> mov    0xc(%ebp),%eax
fffffc26 <__fast_memcpy_rom+0x26> lea    0x4(%eax),%ecx
fffffc29 <__fast_memcpy_rom+0x29> mov    %ecx,0xc(%ebp)
fffffc2c <__fast_memcpy_rom+0x2c> mov    (%edx),%edx
fffffc2e <__fast_memcpy_rom+0x2e> mov    %edx,(%eax)
fffffc30 <__fast_memcpy_rom+0x30> cmpl   $0x0,0x10(%ebp)
fffffc34 <__fast_memcpy_rom+0x34> jne    fffffc16 <__fast_memcpy_rom+0x16>
fffffc36 <__fast_memcpy_rom+0x36> movb   $0x0,-0x1(%ebp)
fffffc3a <__fast_memcpy_rom+0x3a> movzbl -0x1(%ebp),%eax
fffffc3e <__fast_memcpy_rom+0x3e> leave  
fffffc3f <__fast_memcpy_rom+0x3f> ret    
