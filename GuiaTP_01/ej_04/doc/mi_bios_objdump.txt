
./bin/mi_bios.elf:     formato del fichero elf32-i386
./bin/mi_bios.elf
arquitectura: i386, opciones 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
dirección de inicio 0xfffffff0

Encabezado del Programa:
    LOAD off    0x00001000 vaddr 0xffff0000 paddr 0xffff0000 align 2**12
         filesz 0x00000080 memsz 0x00000080 flags r--
    LOAD off    0x00002000 vaddr 0x00010000 paddr 0xffff1000 align 2**12
         filesz 0x00000040 memsz 0x00000040 flags r-x
    LOAD off    0x00003000 vaddr 0x00202000 paddr 0xffff2000 align 2**12
         filesz 0x00000003 memsz 0x00000003 flags r--
    LOAD off    0x00003800 vaddr 0xfffff800 paddr 0xfffff800 align 2**12
         filesz 0x00000800 memsz 0x00000800 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .codigo_kernel32 00000003  00202000  ffff2000  00003000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .functions    00000040  00010000  ffff1000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .codigo_init16 00000080  ffff0000  ffff0000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .codigo_init32 00000072  fffff800  fffff800  00003800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .functions_rom 00000040  fffffc00  fffffc00  00003c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .data         00000026  fffffd00  fffffd00  00003d00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .codigo_reset 00000008  fffffff0  fffffff0  00003ff0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fill_rom     00000008  fffffff8  fffffff8  00003ff8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .comment      00000026  00000000  00000000  00004000  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00202000 l    d  .codigo_kernel32	00000000 .codigo_kernel32
00010000 l    d  .functions	00000000 .functions
ffff0000 l    d  .codigo_init16	00000000 .codigo_init16
fffff800 l    d  .codigo_init32	00000000 .codigo_init32
fffffc00 l    d  .functions_rom	00000000 .functions_rom
fffffd00 l    d  .data	00000000 .data
fffffff0 l    d  .codigo_reset	00000000 .codigo_reset
fffffff8 l    d  .fill_rom	00000000 .fill_rom
00000000 l    d  .comment	00000000 .comment
00000000 l    df *ABS*	00000000 src/main.asm
00202000 l       .codigo_kernel32	00000000 kernel32_init.guard
00000000 l    df *ABS*	00000000 functions.c
00000000 l    df *ABS*	00000000 src/init16.asm
ffff000a l       .codigo_init16	00000000 A20_Enable_No_Stack_return
ffff0040 l       .codigo_init16	00000000 fault_end
ffff0041 l       .codigo_init16	00000000 A20_Enable_No_Stack
ffff0048 l       .codigo_init16	00000000 A20_Enable_No_Stack.8042_kbrd_dis
ffff0051 l       .codigo_init16	00000000 A20_Enable_No_Stack.8042_read_out
ffff0055 l       .codigo_init16	00000000 A20_Enable_No_Stack.empty_8042_out
ffff0060 l       .codigo_init16	00000000 A20_Enable_No_Stack.8042_write_out
ffff0069 l       .codigo_init16	00000000 A20_Enable_No_Stack.8042_set_a20
ffff0075 l       .codigo_init16	00000000 A20_Enable_No_Stack.8042_kbrd_en
ffff007c l       .codigo_init16	00000000 A20_Enable_No_Stack.empty_8042_in
ffff007e l       .codigo_init16	00000000 A20_Enable_No_Stack.a20_enable_no_stack_exit
ffff0080 l       .codigo_init16	00000000 endcode
00000000 l    df *ABS*	00000000 src/init32.asm
fffff81a l       .codigo_init32	00000000 start32_launcher.stack_init
fffff86f l       .codigo_init32	00000000 start32_launcher.guard
00000000 l    df *ABS*	00000000 functions_rom.c
00000000 l    df *ABS*	00000000 src/sys_tables.asm
fffffd00 l       .data	00000000 GDT
00000000 l       *ABS*	00000000 NULL_SEL
00000020 l       *ABS*	00000000 GDT_LENGTH
00000000 l    df *ABS*	00000000 src/reset.asm
fffffff5 l       .codigo_reset	00000000 halted
fffffff8 l       .codigo_reset	00000000 end
fffffff0 g       *ABS*	00000000 __RESET_LMA
ffff1000 g       *ABS*	00000000 __FUNCTIONS_LMA
00000040 g       *ABS*	00000000 __functions_size
fffffc00 g       *ABS*	00000000 __FUNCTIONS_ROM_VMA
ffff0000 g       *ABS*	00000000 __INIT_16_LMA
fffffc00 g       *ABS*	00000000 __FUNCTIONS_ROM_LMA
00000018 g       *ABS*	00000000 DS_SEL
fffffff0 g       .codigo_reset	00000000 reset
2fff8000 g       *ABS*	00000000 __STACK_START_32
00010000 g       *ABS*	00000000 __FUNCTIONS_VMA
ffff0000 g       *ABS*	00000000 __INIT_16_VMA
fffffd20 g       .data	00000000 _gdtr
fffffd00 g       *ABS*	00000000 __SYS_TABLES_VMA
00009000 g       *ABS*	00000000 __STACK_START_16
00202000 g       .codigo_kernel32	00000000 kernel32_init
2fff8fff g       *ABS*	00000000 __STACK_END_32
00202000 g       *ABS*	00000000 __KERNEL_32_VMA
00010000 g     F .functions	00000040 __fast_memcpy
00000010 g       *ABS*	00000000 CS_SEL_32
000003ff g       *ABS*	00000000 __STACK_SIZE_32
00009fff g       *ABS*	00000000 __STACK_END_16
ffff2000 g       *ABS*	00000000 __KERNEL_32_LMA
00000008 g       *ABS*	00000000 CS_SEL_16
fffffff0 g       *ABS*	00000000 __RESET_VMA
fffff800 g       *ABS*	00000000 __INIT_32_VMA
00060000 g       *ABS*	00000000 __EH_FRAME
00050000 g       *ABS*	00000000 __DATA_NO_INIT
ffff0000 g       .codigo_init16	00000000 start16
fffff800 g       *ABS*	00000000 __INIT_32_LMA
fffffd00 g       *ABS*	00000000 __SYS_TABLES_LMA
00000003 g       *ABS*	00000000 __codigo_kernel32_size
fffffc00 g     F .functions_rom	00000040 __fast_memcpy_rom
fffff800 g       .codigo_init32	00000000 start32_launcher


Contenido de la sección .codigo_kernel32:
 202000 f4ebfd                               ...             
Contenido de la sección .functions:
 10000 f30f1efb 5589e583 ec10c645 ff00837d  ....U......E...}
 10010 10007426 eb1a836d 10018b55 088d4204  ..t&...m...U..B.
 10020 8945088b 450c8d48 04894d0c 8b128910  .E..E..H..M.....
 10030 837d1000 75e0c645 ff010fb6 45ffc9c3  .}..u..E....E...
Contenido de la sección .codigo_init16:
 ffff0000 66a90000 00007538 eb376631 c00f22d8  f.....u8.7f1..".
 ffff0010 8cc88ed8 b800908e d0bcff9f 0f20c066  ............. .f
 ffff0020 0d000000 600f22c0 0f090f01 1620fd0f  ....`."...... ..
 ffff0030 01e083c8 010f01f0 66ea00f8 ffff1000  ........f.......
 ffff0040 f431c0bf 4800eb34 b0ade664 bf5100eb  .1..H..4...d.Q..
 ffff0050 2bb0d0e6 6431dbe4 6089c3bf 6000eb1c  +...d1..`...`...
 ffff0060 b0d1e664 bf6900eb 1389d883 c802e660  ...d.i.........`
 ffff0070 bf7500eb 07b0aee6 64bf7e00 ffe7eb8a  .u......d.~.....
Contenido de la sección .codigo_init32:
 fffff800 66b81800 8ed88ec0 8ee88ee0 8ed0bcff  f...............
 fffff810 8fff2f31 c0b9ff03 000050e2 fdbcff8f  ../1......P.....
 fffff820 ff2f6687 db5589e5 68400000 00680000  ./f..U..h@...h..
 fffff830 01006800 10ffffe8 c4030000 c96687db  ..h..........f..
 fffff840 83f80175 2a6687db 5589e568 03000000  ...u*f..U..h....
 fffff850 68002020 00680020 ffffe8a1 030000c9  h.  .h. ........
 fffff860 6687db83 f8017507 ea002020 001000f4  f.....u...  ....
 fffff870 ebfd                                 ..              
Contenido de la sección .functions_rom:
 fffffc00 f30f1efb 5589e583 ec10c645 ff00837d  ....U......E...}
 fffffc10 10007426 eb1a836d 10018b55 088d4204  ..t&...m...U..B.
 fffffc20 8945088b 450c8d48 04894d0c 8b128910  .E..E..H..M.....
 fffffc30 837d1000 75e0c645 ff010fb6 45ffc9c3  .}..u..E....E...
Contenido de la sección .data:
 fffffd00 00000000 00000000 ffff0000 ff9940ff  ..............@.
 fffffd10 ffff0000 0099cf00 ffff0000 0092cf00  ................
 fffffd20 1f0000fd 0f00                        ......          
Contenido de la sección .codigo_reset:
 fffffff0 fafce90b 00f4ebfd                    ........        
Contenido de la sección .fill_rom:
 fffffff8 90909090 90909090                    ........        
Contenido de la sección .comment:
 0000 4743433a 20285562 756e7475 2031302e  GCC: (Ubuntu 10.
 0010 322e302d 31337562 756e7475 31292031  2.0-13ubuntu1) 1
 0020 302e322e 3000                        0.2.0.          

Desensamblado de la sección .functions:
00010000 <__fast_memcpy> endbr32 
00010004 <__fast_memcpy+0x4> push   %ebp
00010005 <__fast_memcpy+0x5> mov    %esp,%ebp
00010007 <__fast_memcpy+0x7> sub    $0x10,%esp
0001000a <__fast_memcpy+0xa> movb   $0x0,-0x1(%ebp)
0001000e <__fast_memcpy+0xe> cmpl   $0x0,0x10(%ebp)
00010012 <__fast_memcpy+0x12> je     0001003a <__fast_memcpy+0x3a>
00010014 <__fast_memcpy+0x14> jmp    00010030 <__fast_memcpy+0x30>
00010016 <__fast_memcpy+0x16> subl   $0x1,0x10(%ebp)
0001001a <__fast_memcpy+0x1a> mov    0x8(%ebp),%edx
0001001d <__fast_memcpy+0x1d> lea    0x4(%edx),%eax
00010020 <__fast_memcpy+0x20> mov    %eax,0x8(%ebp)
00010023 <__fast_memcpy+0x23> mov    0xc(%ebp),%eax
00010026 <__fast_memcpy+0x26> lea    0x4(%eax),%ecx
00010029 <__fast_memcpy+0x29> mov    %ecx,0xc(%ebp)
0001002c <__fast_memcpy+0x2c> mov    (%edx),%edx
0001002e <__fast_memcpy+0x2e> mov    %edx,(%eax)
00010030 <__fast_memcpy+0x30> cmpl   $0x0,0x10(%ebp)
00010034 <__fast_memcpy+0x34> jne    00010016 <__fast_memcpy+0x16>
00010036 <__fast_memcpy+0x36> movb   $0x1,-0x1(%ebp)
0001003a <__fast_memcpy+0x3a> movzbl -0x1(%ebp),%eax
0001003e <__fast_memcpy+0x3e> leave  
0001003f <__fast_memcpy+0x3f> ret    

Desensamblado de la sección .functions_rom:
fffffc00 <__fast_memcpy_rom> endbr32 
fffffc04 <__fast_memcpy_rom+0x4> push   %ebp
fffffc05 <__fast_memcpy_rom+0x5> mov    %esp,%ebp
fffffc07 <__fast_memcpy_rom+0x7> sub    $0x10,%esp
fffffc0a <__fast_memcpy_rom+0xa> movb   $0x0,-0x1(%ebp)
fffffc0e <__fast_memcpy_rom+0xe> cmpl   $0x0,0x10(%ebp)
fffffc12 <__fast_memcpy_rom+0x12> je     fffffc3a <__fast_memcpy_rom+0x3a>
fffffc14 <__fast_memcpy_rom+0x14> jmp    fffffc30 <__fast_memcpy_rom+0x30>
fffffc16 <__fast_memcpy_rom+0x16> subl   $0x1,0x10(%ebp)
fffffc1a <__fast_memcpy_rom+0x1a> mov    0x8(%ebp),%edx
fffffc1d <__fast_memcpy_rom+0x1d> lea    0x4(%edx),%eax
fffffc20 <__fast_memcpy_rom+0x20> mov    %eax,0x8(%ebp)
fffffc23 <__fast_memcpy_rom+0x23> mov    0xc(%ebp),%eax
fffffc26 <__fast_memcpy_rom+0x26> lea    0x4(%eax),%ecx
fffffc29 <__fast_memcpy_rom+0x29> mov    %ecx,0xc(%ebp)
fffffc2c <__fast_memcpy_rom+0x2c> mov    (%edx),%edx
fffffc2e <__fast_memcpy_rom+0x2e> mov    %edx,(%eax)
fffffc30 <__fast_memcpy_rom+0x30> cmpl   $0x0,0x10(%ebp)
fffffc34 <__fast_memcpy_rom+0x34> jne    fffffc16 <__fast_memcpy_rom+0x16>
fffffc36 <__fast_memcpy_rom+0x36> movb   $0x1,-0x1(%ebp)
fffffc3a <__fast_memcpy_rom+0x3a> movzbl -0x1(%ebp),%eax
fffffc3e <__fast_memcpy_rom+0x3e> leave  
fffffc3f <__fast_memcpy_rom+0x3f> ret    
